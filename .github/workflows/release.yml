name: Test, Buid, Release

on:
  workflow_dispatch:

env:
  SolutionName: ${{github.event.repository.name}}

jobs:
  test_net_windows:
    name: Testing .NET (Windows)
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
    - name: Restoring dependencies
      run: dotnet restore ${{env.SolutionName}}.sln
    - name: Testing .NET
      run: dotnet test ${{env.SolutionName}}.sln --no-build --verbosity normal

  test_net_ubuntu:
    name: Testing .NET (Ubuntu)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
    - name: Restoring dependencies
      run: dotnet restore ${{env.SolutionName}}.sln
    - name: Testing .NET
      run: dotnet test ${{env.SolutionName}}.sln --no-build --verbosity normal

  version:
    name: Incrementing version number
    needs: [test_net_windows,test_net_ubuntu]
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{steps.tag_version.outputs.new_version}}
      new_tag: ${{steps.tag_version.outputs.new_tag}}
      changelog: ${{steps.tag_version.outputs.changelog}}
    steps:
    - name: Updating version number
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        #custom_tag: 1.3.1

  files_exists:
    name: Checking project existence
    needs: [version]
    runs-on: ubuntu-latest
    outputs:
      net_framework_project_exists: ${{steps.net_framework.outputs.files_exists}}
      net_project_exists: ${{steps.net.outputs.files_exists}}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
    - name: .NET Framework project exists
      id: net_framework
      uses: andstor/file-existence-action@v3
      with:
        files: "${{github.workspace}}/${{env.SolutionName}}/${{env.SolutionName}}35.csproj"
        ignore_case: true
    - name: .NET project exists
      id: net
      uses: andstor/file-existence-action@v3
      with:
        files: "${{github.workspace}}/${{env.SolutionName}}/${{env.SolutionName}}.csproj"
        ignore_case: true

  build_net_framework:
    name: Building .NET Framework assembly
    needs: [version,files_exists]
    if: needs.files_exists.outputs.net_framework_project_exists == 'true'
    runs-on: windows-latest
    steps:
    - name: Decoding SNK
      id: sign_key_file
      uses: timheuer/base64-to-file@v1.2
      with:
        fileName: 'Signature.snk'
        encodedString: ${{secrets.SIGN_KEY}}
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup .NET
      uses: microsoft/setup-msbuild@v2
    - name: Restoring NuGet packages
      run: nuget restore "${{github.workspace}}\${{env.SolutionName}}.sln"
    - name: Building .NET Framework
      run: MSBuild -nologo -restore "${{github.workspace}}\${{env.SolutionName}}\${{env.SolutionName}}35.csproj" /property:Configuration=Release -property:OutputPath="${{github.workspace}}\bin\" -property:Version=${{needs.version.outputs.new_version}} -property:AssemblyOriginatorKeyFile="${{ steps.sign_key_file.outputs.filePath }}"
    - name: Deploying artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Net20
        path: ${{github.workspace}}/bin/*
        if-no-files-found: error

  build_net:
    name: Building .NET assembly
    needs: [version,files_exists]
    if: needs.files_exists.outputs.net_project_exists == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Decoding SNK
      id: sign_key_file
      uses: timheuer/base64-to-file@v1.2
      with:
        fileName: 'Signature.snk'
        encodedString: ${{secrets.SIGN_KEY}}
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 7.0.x
    - name: Restoring dependencies
      run: dotnet restore ${{env.SolutionName}}.sln
    - name: Building .NET
      run: dotnet build "${{github.workspace}}\${{env.SolutionName}}\${{env.SolutionName}}.csproj" --configuration Release --no-restore /p:OutputPath="../bin/" /p:DocumentationFile="../bin/${{env.SolutionName}}.xml" /p:SignAssembly=true /p:AssemblyOriginatorKeyFile="${{steps.sign_key_file.outputs.filePath}}" /p:AssemblyVersion=${{needs.version.outputs.new_version}} /p:FileVersion=${{needs.version.outputs.new_version}} /p:InformationalVersion=${{needs.version.outputs.new_version}}
    - name: Deploying artifacts
      uses: actions/upload-artifact@v4
      with:
        name: NetStandard20
        path: ${{github.workspace}}/bin/*
        if-no-files-found: error

  deploy_release:
    name: Deploying release
    needs:
      - version
      - build_net_framework
      - build_net
    if: |
        always() &&
        (needs.build_net_framework.result == 'skipped' || needs.build_net_framework.result == 'success') &&
        (needs.build_net.result == 'skipped' || needs.build_net.result == 'success')
    runs-on: ubuntu-latest
    steps:
    - name: Extracting all artifacts
      uses: actions/download-artifact@v4
      with:
        path: bin
    - name: Zipping artifacts
      run: zip -qq -r ${{github.event.repository.name}}_${{needs.version.outputs.new_tag}}.zip *
      working-directory: ${{github.workspace}}/bin
    - name: Deploying GitHub release
      uses: ncipollo/release-action@v1
      with:
        artifacts: ${{github.workspace}}/bin/${{github.event.repository.name}}_${{needs.version.outputs.new_tag}}.zip
        tag: ${{needs.version.outputs.new_tag}}
        name: Auto ${{needs.version.outputs.new_tag}}
        body: ${{needs.version.outputs.changelog}}
        artifactErrorsFailBuild: true
        generateReleaseNotes: true

  deploy_nuget:
    name: Deploying NuGet package
    needs:
        - version
        - build_net_framework
        - build_net
    if: |
        always() &&
        (needs.build_net_framework.result == 'skipped' || needs.build_net_framework.result == 'success') &&
        (needs.build_net.result == 'skipped' || needs.build_net.result == 'success')
    runs-on: windows-latest

    steps:
    - name: Checkout nessesary files from repository
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          README.md
          ${{env.SolutionName}}.dll.nuspec
        sparse-checkout-cone-mode: false
    - name: Extracting all artifacts
      uses: actions/download-artifact@v4
      with:
        path: bin
    - name: Packing artifacts
      run: nuget pack ${{env.SolutionName}}.dll.nuspec -Version ${{needs.version.outputs.new_version}} -OutputDirectory nupkg
    - name: Deploying to GitHub
      run: dotnet nuget push nupkg\*.nupkg --skip-duplicate --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/DKorablin/index.json
    - name: Deploying to NuGet
      run: dotnet nuget push nupkg\*.nupkg --skip-duplicate --api-key ${{ secrets.NUGET_TOKEN }} --source https://api.nuget.org/v3/index.json

  failure_cleanup:
  #error: tag '${{needs.version.outputs.new_tag}}' not found.
    name: Remove version tag on failure
    needs:
      - version
      - build_net_framework
      - build_net
    if: |
      always() &&
      needs.build_net_framework.result != 'success' &&
      needs.build_net.result != 'success'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0 #Fetch all history for all tags and branches
    - name: Removing version tag
      run: |
        git tag -d ${{needs.version.outputs.new_tag}}